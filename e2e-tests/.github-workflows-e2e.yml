name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: customer_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          e2e-tests/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/customer_management_test
      run: |
        cd backend
        python manage.py migrate
        python manage.py collectstatic --noinput

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Install E2E test dependencies
      run: |
        cd e2e-tests
        npm ci

    - name: Install Playwright Browsers
      run: |
        cd e2e-tests
        npx playwright install --with-deps

    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/customer_management_test
        DJANGO_SETTINGS_MODULE: customer_management.settings
      run: |
        cd backend
        python manage.py runserver 8000 &
        # Wait for server to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/health/; do sleep 2; done'

    - name: Start frontend server
      run: |
        cd frontend
        npm run preview -- --port 3000 --host &
        # Wait for server to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Playwright tests
      run: |
        cd e2e-tests
        npx playwright test
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: e2e-tests/test-results/
        retention-days: 30

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read test results if available
            const resultsPath = path.join('e2e-tests', 'test-results', 'results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              const passed = results.stats?.passed || 0;
              const failed = results.stats?.failed || 0;
              const skipped = results.stats?.skipped || 0;
              const total = passed + failed + skipped;
              
              const status = failed > 0 ? '‚ùå' : '‚úÖ';
              const reportUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
              
              const comment = `## ${status} E2E Test Results
              
              - **Total Tests**: ${total}
              - **Passed**: ‚úÖ ${passed}
              - **Failed**: ‚ùå ${failed}
              - **Skipped**: ‚è≠Ô∏è ${skipped}
              
              ${failed > 0 ? '**‚ö†Ô∏è Some tests failed. Please check the detailed report.**' : '**üéâ All tests passed!**'}
              
              [View detailed report](${reportUrl})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post test results:', error);
          }

  # Optional: Deploy to staging if tests pass
  deploy-staging:
    needs: e2e-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment steps here

  # Optional: Performance monitoring
  performance-tests:
    needs: e2e-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        # Configure and run Lighthouse CI
        echo "Running Lighthouse performance tests..."